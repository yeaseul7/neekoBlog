{"version":3,"file":"component---src-templates-blog-post-js-1c54acc8e1649bfa4bf7.js","mappings":"uJAAyB,IAEnBA,EAAU,SAAAC,GACd,SAAAD,EAAYE,GAAQ,IAADC,EAIiB,OAHlCA,EAAAF,EAAAG,KAAA,KAAMF,IAAM,MAEPG,WAAaC,EAAAA,YAClBH,EAAKI,MAAQ,CAAEC,OAAQ,WAAWL,CACpC,EANcM,EAAAA,EAAAA,GAAAT,EAAAC,GAMb,IAAAS,EAAAV,EAAAW,UAyBA,OAzBAD,EAEDE,kBAAA,WACE,MAAMC,EAAWC,SAASC,cAAc,UACxCF,EAASG,OAAS,IAAMC,KAAKC,SAAS,CAAEV,OAAQ,YAChDK,EAASM,QAAU,IAAMF,KAAKC,SAAS,CAAEV,OAAQ,WACjDK,EAASO,OAAQ,EACjBP,EAASQ,IAAM,gCACfR,EAASS,aAAa,OAAQ,sBAC9BT,EAASS,aAAa,aAAc,SACpCT,EAASS,aAAa,QAAS,gBAC/BT,EAASS,aAAa,cAAe,aACrCL,KAAKZ,WAAWkB,QAAQC,YAAYX,EACtC,EAACH,EAEDe,OAAA,WACE,MAAM,OAAEjB,GAAWS,KAAKV,MAExB,OACED,EAAAA,cAAA,OAAKoB,UAAU,oBACD,WAAXlB,GAAuBF,EAAAA,cAAA,WAAK,4BACjB,YAAXE,GAAwBF,EAAAA,cAAA,WAAK,qBAC9BA,EAAAA,cAAA,OAAKqB,IAAKV,KAAKZ,aAGrB,EAACL,CAAA,CA/Ba,CAASM,EAAAA,WAkCzB,K,wICxBmBsB,QAAOC,IAAGC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,eAAVJ,CAAU,sCAgD7B,I,8BCpDA,MAsDaK,EAAOC,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQH,EACrD,OACE5B,EAAAA,cAACgC,EAAAA,EAAG,CACFC,MAAOF,EAAKG,YAAYD,MACxBE,YAAaJ,EAAKG,YAAYC,aAAeJ,EAAKK,SAClD,EAIN,MA/DyBC,IAGlB,IAADC,EAAA,IAFJT,MAAM,SAAEU,EAAQ,KAAEC,EAAI,KAAEC,EAAMX,eAAgBC,GAAM,SACpDW,GACDL,EACC,MAAMM,GAA6B,QAAjBL,EAAAG,EAAKG,oBAAY,IAAAN,OAAA,EAAjBA,EAAmBL,QAAK,QAE1C,OACEjC,EAAAA,cAAC6C,EAAAA,EAAM,CAACH,SAAUA,EAAUT,MAAOU,GACjC3C,EAAAA,cAAC8C,EAAAA,GAAW,CACV1B,UAAU,YACV2B,WAAS,EACTC,SAAS,6BAEThD,EAAAA,cAACiD,EAAAA,GAAU,KACTjD,EAAAA,cAAA,MAAIkD,SAAS,YAAYnB,EAAKG,YAAYD,OAC1CjC,EAAAA,cAAA,SAAI+B,EAAKG,YAAYiB,OAEvBnD,EAAAA,cAAA,sBACEoD,wBAAyB,CAAEC,OAAQtB,EAAKuB,MACxCJ,SAAS,gBAEXlD,EAAAA,cAAA,WACAA,EAAAA,cAACN,EAAAA,EAAU,OAEbM,EAAAA,cAAA,OAAKoB,UAAU,iBACbpB,EAAAA,cAAA,MACEuD,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX5D,EAAAA,cAAC6D,EAAAA,GAAc,KACZtB,GACCvC,EAAAA,cAAC8D,EAAAA,KAAI,CAACC,GAAIxB,EAASyB,OAAOC,KAAMC,IAAI,QAAO,KACtC3B,EAASL,YAAYD,QAI9BjC,EAAAA,cAAC6D,EAAAA,GAAc,KACZrB,GACCxC,EAAAA,cAAC8D,EAAAA,KAAI,CAACC,GAAIvB,EAAKwB,OAAOC,KAAMC,IAAI,QAC7B1B,EAAKN,YAAYD,MAAM,SAM3B,C","sources":["webpack://gatsby-starter-blog/./src/components/Utterances.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import React from \"react\"\n\nclass Utterances extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.commentsEl = React.createRef()\n    this.state = { status: \"pending\" }\n  }\n\n  componentDidMount() {\n    const scriptEl = document.createElement(\"script\")\n    scriptEl.onload = () => this.setState({ status: \"success\" })\n    scriptEl.onerror = () => this.setState({ status: \"failed\" })\n    scriptEl.async = true\n    scriptEl.src = \"https://utteranc.es/client.js\"\n    scriptEl.setAttribute(\"repo\", \"yeaseul7/neekoblog\")\n    scriptEl.setAttribute(\"issue-term\", \"title\")\n    scriptEl.setAttribute(\"theme\", \"github-light\")\n    scriptEl.setAttribute(\"crossorigin\", \"anonymous\")\n    this.commentsEl.current.appendChild(scriptEl)\n  }\n\n  render() {\n    const { status } = this.state\n\n    return (\n      <div className=\"comments-wrapper\">\n        {status === \"failed\" && <div>Error. Please try again.</div>}\n        {status === \"pending\" && <div>Loading script...</div>}\n        <div ref={this.commentsEl} />\n      </div>\n    )\n  }\n}\n\nexport default Utterances\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport styled from \"styled-components\"\n\nconst ProfileBox = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <ProfileBox className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/ot171@3x.png\"\n        width={38}\n        height={38}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong>\n          {/* {author?.summary || null} */}\n        </p>\n      )}\n    </ProfileBox>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { PostArticle, PostFooterList, PostHeader } from \"../styles/postStyle\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Utterances from \"../components/Utterances\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <PostArticle\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <PostHeader>\n          <h4 itemProp=\"headline\">{post.frontmatter.title}</h4>\n          <p>{post.frontmatter.date}</p>\n        </PostHeader>\n        <sectiarticleBodyon\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <Utterances />\n      </PostArticle>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <PostFooterList>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </PostFooterList>\n          <PostFooterList>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </PostFooterList>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Utterances","_React$Component","props","_this","call","commentsEl","React","state","status","_inheritsLoose","_proto","prototype","componentDidMount","scriptEl","document","createElement","onload","this","setState","onerror","async","src","setAttribute","current","appendChild","render","className","ref","styled","div","withConfig","displayName","componentId","Head","_ref2","data","markdownRemark","post","Seo","title","frontmatter","description","excerpt","_ref","_site$siteMetadata","previous","next","site","location","siteTitle","siteMetadata","Layout","PostArticle","itemScope","itemType","PostHeader","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","PostFooterList","Link","to","fields","slug","rel"],"sourceRoot":""}